var ApiResponse = function (res) {
    this.res = res;
};

ApiResponse.prototype._response = function (data, code) {
    var jsonString = JSON.stringify(data);
    this.res.status(code);
    this.res.setHeader("Content-Type", 'application/json');
    this.res.setHeader("Content-Length", Buffer.byteLength(jsonString));
    this.res.send(jsonString);
};

ApiResponse.prototype.list = function (data) {
    this._response({
        result: 'ok',
        count: data.length,
        data: data
    }, 200);
};

ApiResponse.prototype.single = function (data) {
    this._response({
        result: 'ok',
        data: data
    }, 200);
};

ApiResponse.prototype.count = function (count) {
    this._response({
        result: 'ok',
        count: count
    }, 200);
};

ApiResponse.prototype.create = function (data) {
    this._response({
        result: 'ok',
        data: data
    }, 201);
};

ApiResponse.prototype.update = function (data) {
    this._response({
        result: 'ok',
        data: data
    }, 200);
};

ApiResponse.prototype.delete = function () {
    this._response({
        result: 'ok'
    }, 200);
};

ApiResponse.prototype.badRequest = function (msg) {
    msg  = msg  || 'Bad request';

    this._response({
        result: 'error',
        message: msg
    }, 400);
};

ApiResponse.prototype.unauthorized = function (msg) {
    msg  = msg  || 'Unauthorized';

    this._response({
        result: 'error',
        message: msg
    }, 401);
};

ApiResponse.prototype.forbidden = function (msg) {
    msg  = msg  || 'Forbidden';

    this._response({
        result: 'error',
        message: msg
    }, 403);
};

ApiResponse.prototype.notFound = function (msg) {
    msg  = msg  || 'Not found';

    this._response({
        result: 'error',
        message: msg
    }, 404);
};

ApiResponse.prototype.missingParams = function (msg, parameters) {
    msg = msg || 'One or more required parameters are missing.';

    var resp = {
        result: 'error',
        message: msg
    };

    if (parameters && parameters instanceof Array) {
        resp.parameters = parameters;
    }

    this._response(resp, 422);
};

ApiResponse.prototype.error = function (err, code) {
    code = code || 500;

    var msg;
    var resp = {
        result: 'error'
    };

    if (err && err instanceof Error) {
        msg = err.message;
        resp.error = err;
    }

    resp.message = msg || 'Internal server error';

    this._response(resp, code);
};

ApiResponse.bind = function (res) {
    res.api = new ApiResponse(res);
};

module.exports = ApiResponse;